Rotate an array of n elements to the right by k steps.

For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].

Note:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.

[show hint]

Hint:
Could you do it in-place with O(1) extra space?

Related problem: Reverse Words in a String II

Credits:
Special thanks to @Freezen for adding this problem and creating all test cases.


直接全翻转，再在index 为k-1处，分2块进行翻转
class Solution(object):
    def reverse(self,nums,s,k):
        #length = len(nums)
        #length = k
        #e = s+k-1
        length = k
        mid = s+length/2
        mod = length%2
        for i in range(s,mid):
        	if mod==0:

	            tmp = nums[i]
	            nums[i] = nums[2*mid-i-1]
	            nums[2*mid-i-1] = tmp
	        else:
	        	tmp = nums[i]
	        	nums[i] = nums[2*mid-i]
	        	nums[2*mid-i] = tmp
        #return nums
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        length = len(nums)
        k = k%length
        self.reverse(nums,0,length)
        print nums
        self.reverse(nums,0,k)
        print nums
        self.reverse(nums,k,length-k)
        print nums
        
        
        
            
            
            
