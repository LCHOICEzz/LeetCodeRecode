Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Example 1:

Input: [1,3,4,2,2]
Output: 2
Example 2:

Input: [3,1,3,4,2]
Output: 3
Note:

You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.


只能用O(1)的额外空间，因此不能用hash的方式。
观察n+1个整数，有[1,n]的范围，肯定至少有1个重复。直接把每个元素与index对上，修改数组，注意，应该是index+1=nums[index]才对。而且swap要放在最后。
class Solution(object):
    def swap(self,nums,i,j):
        tmp = nums[i]
        nums[i] = nums[j]
        nums[j] = tmp
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        length = len(nums)
        for i in range(length):
            while(nums[i]!=i+1):
                j = nums[i]-1
                if nums[i] == nums[nums[i]-1]:
                    return nums[i]
                self.swap(nums,i,j)
                
        return False
                    
            
                
                    
        
                
            
